HELLO
.. image:: docs/bitpacker.svg
    :width: 10 %
.. image:: https://codecov.io/gh/jonasblixt/bpak/branch/master/graph/badge.svg
  :target: https://codecov.io/gh/jonasblixt/bpak
.. image:: https://github.com/jonasblixt/bpak/actions/workflows/build.yml/badge.svg
    :target: https://github.com/jonasblixt/bpak/actions/workflows/build.yml
.. image:: https://scan.coverity.com/projects/20419/badge.svg
    :target: https://scan.coverity.com/projects/jonasblixt-bpak
.. image:: https://readthedocs.org/projects/bpak/badge/?version=latest
    :target: https://bpak.readthedocs.io/en/latest/?badge=latest
    :alt: Documentation Status

------------
Introduction
------------

Bitpacker or bpak for short is a tool and library for creating firmware archives
that can be cryptographically signed, support custom metadata and enable
advanced update schemes. Bitpacker is primarily designed for embedded systems.

Embedded systems are often composed of several software components, for example:
bootloader, kernel, file systems, device configuration, third party applications,
etc. It is common to have many different formats and tools for the various
components.

One of the main goals with bitpacker is to reduce the number of tools and
formats required to manage these components.

Documentation is available here: `BPAK documentation`_

-----------------------
Building and installing
-----------------------

The library has no external dependencies and the tool only depends on the c
library and the bpak library.

The 'autoconf-archive' package must be installed before running autoreconf.

Build library and tool::

    $ autoreconf -fi
    $ ./configure
    $ make
    $ sudo make install

Running tests::

    $ ./configure --enable-code-coverage
    $ make && make check

.. _BPAK documentation: http://bpak.readthedocs.io/en/latest
dnl Bit Packer

AC_PREREQ(2.59)
AC_INIT([bpak], [0.6.0], [Jonas Blixt, <jonpe960@gmail.com>])

m4_pattern_forbid([^AX_(CHECK_ENABLE_DEBUG|CODE_COVERAGE|COMPILER_FLAGS|COMPILER_FLAGS_(CFLAGS|CXXFLAGS|LDFLAGS))\b],
  [Unexpanded AX_ macro found. Please install GNU autoconf-archive])

AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([foreign -Wall -Werror subdir-objects])
AM_PROG_AR
LT_INIT
AC_PROG_CC

dnl this allows us specify individual liking flags for each target
AM_PROG_CC_C_O

dnl Initialize Libtool

dnl Check if Libtool is present
dnl Libtool is used for building share libraries
AC_PROG_LIBTOOL

dnl Python stuff

AC_MSG_CHECKING( wheter to build the bpak python library)
AC_ARG_ENABLE([python-library],
             AS_HELP_STRING([--enable-python-library], [Build the bpak python libraryl]),
             [enable_python_library=$enableval],
             [enable_python_library="no"])

AC_MSG_RESULT($enable_python_library)
AM_CONDITIONAL([BUILD_BPAK_PYTHON_LIB], [test x$enable_python_library = xyes])

if test "x$enable_python_library" = "xyes"; then
    AM_PATH_PYTHON(,, [:])
    AC_ARG_VAR([PYTHON_CONFIG], [python-config program])
    AC_PATH_PROGS([PYTHON_CONFIG], [python$PYTHON_VERSION-config python-config],
                [unknown], [`dirname $PYTHON`:$PATH])
    AC_MSG_CHECKING([for Python include flags])
    if test "x$PYTHON_CONFIG" = "xunknown"; then
      pinc=-I`echo "import distutils.sysconfig; print (distutils.sysconfig.get_python_inc())" | $PYTHON - 2>/dev/null`
      test "x$pinc" = "x-I" && pinc=""
    else
      pinc=`$PYTHON_CONFIG --includes 2>/dev/null`
    fi
    AC_MSG_RESULT([${pinc:-unknown}])
    PYTHON_INCLUDES="$pinc"
    AC_SUBST(PYTHON_INCLUDES)
fi

dnl lzma support

AC_ARG_ENABLE([lzma],
             AS_HELP_STRING([--disable-lzma], [Don''t build bpak with lzma support]),
             [enable_lzma=$enableval],
             [enable_lzma="yes"])
AM_CONDITIONAL([BPAK_BUILD_LZMA], [test x$enable_lzma = xyes])

AC_MSG_CHECKING([Checking for lzma])
PKG_CHECK_MODULES(LIBLZMA, [liblzma >= 4.0.0], [have_lzma=true], [have_lzma=false])
AM_CONDITIONAL([HAVE_LIBLZMA], $have_lzma)

if test "x$enable_lzma" = "xyes"; then

    if $have_lzma; then
        AC_DEFINE([BPAK_BUILD_LZMA], [1], [Build with lzma support])
        CFLAGS="$CFLAGS $LIBLZMA_CFLAGS"
        LIBS="$LIBS $LIBLZMA_LIBS"
    fi
fi

dnl bpak tool options
AC_ARG_ENABLE([tool],
             AS_HELP_STRING([--disable-tool], [Don''t build bpak CLI]),
             [enable_tool=$enableval],
             [enable_tool="yes"])
AM_CONDITIONAL([BPAK_BUILD_TOOL], [test x$enable_tool = xyes])

AC_MSG_CHECKING([Checking for libuuid])
PKG_CHECK_MODULES(LIBUUID, [uuid >= 1.0.0], [have_uuid=true], [have_uuid=false])
AM_CONDITIONAL([HAVE_LIBUUID], $have_uuid)

if test "x$enable_tool" = "xyes"; then
    if $have_uuid; then
        AC_DEFINE([BPAK_BUILD_TOOL], [1], [Build tool])
        CFLAGS="$CFLAGS $LIBUUID_CFLAGS"
        LIBS="$LIBS $LIBUUID_LIBS"
    fi
fi

dnl Enable merkle encoder
AC_ARG_ENABLE([merkle],
             AS_HELP_STRING([--disable-merkle], [Don''t build the bpak merkle encoder]),
             [enable_merkle=$enableval],
             [enable_merkle="yes"])

AM_CONDITIONAL([BPAK_BUILD_MERKLE], [test x$enable_merkle = xyes])

if test "x$enable_merkle" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_MERKLE], [1], [Build with merkle encoder support])
fi

dnl Enable bsdiff
AC_ARG_ENABLE([bsdiff],
             AS_HELP_STRING([--disable-bsdiff], [Don''t build bpak bsdiff]),
             [enable_bsdiff=$enableval],
             [enable_bsdiff="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSDIFF], [test x$enable_bsdiff = xyes])

if test "x$enable_bsdiff" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSDIFF], [1], [Build with bsdiff support])
fi

dnl Enable bspatch
AC_ARG_ENABLE([bspatch],
             AS_HELP_STRING([--disable-bspatch], [Don''t build bpak bspatch]),
             [enable_bspatch=$enableval],
             [enable_bspatch="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSPATCH], [test x$enable_bspatch = xyes])

if test "x$enable_bspatch" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSPATCH], [1], [Build with bspatch support])
fi

dnl Enable pkg_create
AC_ARG_ENABLE([pkg-create],
             AS_HELP_STRING([--disable-pkg-create], [Don''t build pkg create]),
             [enable_pkg_create=$enableval],
             [enable_pkg_create="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_CREATE], [test x$enable_pkg_create = xyes])

if test "x$enable_pkg_create" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_CREATE], [1], [Build with support for creating packages])
fi

dnl Enable transport encode
AC_ARG_ENABLE([transport-encode],
             AS_HELP_STRING([--disable-transport-encode], [Don''t build transport encode]),
             [enable_transport_encode=$enableval],
             [enable_transport_encode="yes"])

AM_CONDITIONAL([BPAK_BUILD_TRANSPORT_ENCODE], [test x$enable_transport_encode = xyes])

if test "x$enable_transport_encode" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_TRANSPORT_ENCODE], [1], [Build with encoding packages for transport])
fi
dnl Enable pkg_sign
AC_ARG_ENABLE([pkg-sign],
             AS_HELP_STRING([--disable-pkg-sign], [Don''t build pkg sign]),
             [enable_pkg_sign=$enableval],
             [enable_pkg_sign="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_SIGN], [test x$enable_pkg_sign = xyes])

if test "x$enable_pkg_sign" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_SIGN], [1], [Build with support for signing packages])
fi

AC_CONFIG_FILES([Makefile
                src/Makefile
                lib/Makefile
                python/Makefile
                test/Makefile
                lib/bpak.pc])

AX_CODE_COVERAGE

dnl Dependencies build
dnl AC_CONFIG_SUBDIRS([deps/dep1])

AC_OUTPUT
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE coverity SYSTEM "coverity_config.dtd">
<coverity>
<!-- Version 2017.07 -->
    <cit_version>1</cit_version>
    <config>
      <include>$CONFIGDIR$/template-gcc-config-0/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-g++-config-0/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-gcc-config-1/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-gcc-config-2/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-g++-config-1/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-g++-config-2/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-ld-config-0/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-gcc-config-3/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-g++-config-3/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-gcc-config-4/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-gcc-config-5/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-g++-config-4/coverity_config.xml</include>
      <include>$CONFIGDIR$/template-g++-config-5/coverity_config.xml</include>
    </config>
</coverity>

dnl Bit Packer

AC_PREREQ(2.59)
AC_INIT([bpak], [0.6.0], [Jonas Blixt, <jonpe960@gmail.com>])

m4_pattern_forbid([^AX_(CHECK_ENABLE_DEBUG|CODE_COVERAGE|COMPILER_FLAGS|COMPILER_FLAGS_(CFLAGS|CXXFLAGS|LDFLAGS))\b],
  [Unexpanded AX_ macro found. Please install GNU autoconf-archive])

AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([foreign -Wall -Werror subdir-objects])
AM_PROG_AR
LT_INIT
AC_PROG_CC

dnl this allows us specify individual liking flags for each target
AM_PROG_CC_C_O

dnl Initialize Libtool

dnl Check if Libtool is present
dnl Libtool is used for building share libraries
AC_PROG_LIBTOOL

dnl Python stuff

AC_MSG_CHECKING( wheter to build the bpak python library)
AC_ARG_ENABLE([python-library],
             AS_HELP_STRING([--enable-python-library], [Build the bpak python libraryl]),
             [enable_python_library=$enableval],
             [enable_python_library="no"])

AC_MSG_RESULT($enable_python_library)
AM_CONDITIONAL([BUILD_BPAK_PYTHON_LIB], [test x$enable_python_library = xyes])

if test "x$enable_python_library" = "xyes"; then
    AM_PATH_PYTHON(,, [:])
    AC_ARG_VAR([PYTHON_CONFIG], [python-config program])
    AC_PATH_PROGS([PYTHON_CONFIG], [python$PYTHON_VERSION-config python-config],
                [unknown], [`dirname $PYTHON`:$PATH])
    AC_MSG_CHECKING([for Python include flags])
    if test "x$PYTHON_CONFIG" = "xunknown"; then
      pinc=-I`echo "import distutils.sysconfig; print (distutils.sysconfig.get_python_inc())" | $PYTHON - 2>/dev/null`
      test "x$pinc" = "x-I" && pinc=""
    else
      pinc=`$PYTHON_CONFIG --includes 2>/dev/null`
    fi
    AC_MSG_RESULT([${pinc:-unknown}])
    PYTHON_INCLUDES="$pinc"
    AC_SUBST(PYTHON_INCLUDES)
fi

dnl lzma support

AC_ARG_ENABLE([lzma],
             AS_HELP_STRING([--disable-lzma], [Don''t build bpak with lzma support]),
             [enable_lzma=$enableval],
             [enable_lzma="yes"])
AM_CONDITIONAL([BPAK_BUILD_LZMA], [test x$enable_lzma = xyes])

AC_MSG_CHECKING([Checking for lzma])
PKG_CHECK_MODULES(LIBLZMA, [liblzma >= 4.0.0], [have_lzma=true], [have_lzma=false])
AM_CONDITIONAL([HAVE_LIBLZMA], $have_lzma)

if test "x$enable_lzma" = "xyes"; then

    if $have_lzma; then
        AC_DEFINE([BPAK_BUILD_LZMA], [1], [Build with lzma support])
        CFLAGS="$CFLAGS $LIBLZMA_CFLAGS"
        LIBS="$LIBS $LIBLZMA_LIBS"
    fi
fi

dnl bpak tool options
AC_ARG_ENABLE([tool],
             AS_HELP_STRING([--disable-tool], [Don''t build bpak CLI]),
             [enable_tool=$enableval],
             [enable_tool="yes"])
AM_CONDITIONAL([BPAK_BUILD_TOOL], [test x$enable_tool = xyes])

AC_MSG_CHECKING([Checking for libuuid])
PKG_CHECK_MODULES(LIBUUID, [uuid >= 1.0.0], [have_uuid=true], [have_uuid=false])
AM_CONDITIONAL([HAVE_LIBUUID], $have_uuid)

if test "x$enable_tool" = "xyes"; then
    if $have_uuid; then
        AC_DEFINE([BPAK_BUILD_TOOL], [1], [Build tool])
        CFLAGS="$CFLAGS $LIBUUID_CFLAGS"
        LIBS="$LIBS $LIBUUID_LIBS"
    fi
fi

dnl Enable merkle encoder
AC_ARG_ENABLE([merkle],
             AS_HELP_STRING([--disable-merkle], [Don''t build the bpak merkle encoder]),
             [enable_merkle=$enableval],
             [enable_merkle="yes"])

AM_CONDITIONAL([BPAK_BUILD_MERKLE], [test x$enable_merkle = xyes])

if test "x$enable_merkle" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_MERKLE], [1], [Build with merkle encoder support])
fi

dnl Enable bsdiff
AC_ARG_ENABLE([bsdiff],
             AS_HELP_STRING([--disable-bsdiff], [Don''t build bpak bsdiff]),
             [enable_bsdiff=$enableval],
             [enable_bsdiff="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSDIFF], [test x$enable_bsdiff = xyes])

if test "x$enable_bsdiff" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSDIFF], [1], [Build with bsdiff support])
fi

dnl Enable bspatch
AC_ARG_ENABLE([bspatch],
             AS_HELP_STRING([--disable-bspatch], [Don''t build bpak bspatch]),
             [enable_bspatch=$enableval],
             [enable_bspatch="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSPATCH], [test x$enable_bspatch = xyes])

if test "x$enable_bspatch" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSPATCH], [1], [Build with bspatch support])
fi

dnl Enable pkg_create
AC_ARG_ENABLE([pkg-create],
             AS_HELP_STRING([--disable-pkg-create], [Don''t build pkg create]),
             [enable_pkg_create=$enableval],
             [enable_pkg_create="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_CREATE], [test x$enable_pkg_create = xyes])

if test "x$enable_pkg_create" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_CREATE], [1], [Build with support for creating packages])
fi

dnl Enable transport encode
AC_ARG_ENABLE([transport-encode],
             AS_HELP_STRING([--disable-transport-encode], [Don''t build transport encode]),
             [enable_transport_encode=$enableval],
             [enable_transport_encode="yes"])

AM_CONDITIONAL([BPAK_BUILD_TRANSPORT_ENCODE], [test x$enable_transport_encode = xyes])

if test "x$enable_transport_encode" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_TRANSPORT_ENCODE], [1], [Build with encoding packages for transport])
fi
dnl Enable pkg_sign
AC_ARG_ENABLE([pkg-sign],
             AS_HELP_STRING([--disable-pkg-sign], [Don''t build pkg sign]),
             [enable_pkg_sign=$enableval],
             [enable_pkg_sign="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_SIGN], [test x$enable_pkg_sign = xyes])

if test "x$enable_pkg_sign" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_SIGN], [1], [Build with support for signing packages])
fi

AC_CONFIG_FILES([Makefile
                src/Makefile
                lib/Makefile
                python/Makefile
                test/Makefile
                lib/bpak.pc])

AX_CODE_COVERAGE

dnl Dependencies build
dnl AC_CONFIG_SUBDIRS([deps/dep1])

AC_OUTPUT
dnl Bit Packer

AC_PREREQ(2.59)
AC_INIT([bpak], [0.6.0], [Jonas Blixt, <jonpe960@gmail.com>])

m4_pattern_forbid([^AX_(CHECK_ENABLE_DEBUG|CODE_COVERAGE|COMPILER_FLAGS|COMPILER_FLAGS_(CFLAGS|CXXFLAGS|LDFLAGS))\b],
  [Unexpanded AX_ macro found. Please install GNU autoconf-archive])

AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([foreign -Wall -Werror subdir-objects])
AM_PROG_AR
LT_INIT
AC_PROG_CC

dnl this allows us specify individual liking flags for each target
AM_PROG_CC_C_O

dnl Initialize Libtool

dnl Check if Libtool is present
dnl Libtool is used for building share libraries
AC_PROG_LIBTOOL

dnl Python stuff

AC_MSG_CHECKING( wheter to build the bpak python library)
AC_ARG_ENABLE([python-library],
             AS_HELP_STRING([--enable-python-library], [Build the bpak python libraryl]),
             [enable_python_library=$enableval],
             [enable_python_library="no"])

AC_MSG_RESULT($enable_python_library)
AM_CONDITIONAL([BUILD_BPAK_PYTHON_LIB], [test x$enable_python_library = xyes])

if test "x$enable_python_library" = "xyes"; then
    AM_PATH_PYTHON(,, [:])
    AC_ARG_VAR([PYTHON_CONFIG], [python-config program])
    AC_PATH_PROGS([PYTHON_CONFIG], [python$PYTHON_VERSION-config python-config],
                [unknown], [`dirname $PYTHON`:$PATH])
    AC_MSG_CHECKING([for Python include flags])
    if test "x$PYTHON_CONFIG" = "xunknown"; then
      pinc=-I`echo "import distutils.sysconfig; print (distutils.sysconfig.get_python_inc())" | $PYTHON - 2>/dev/null`
      test "x$pinc" = "x-I" && pinc=""
    else
      pinc=`$PYTHON_CONFIG --includes 2>/dev/null`
    fi
    AC_MSG_RESULT([${pinc:-unknown}])
    PYTHON_INCLUDES="$pinc"
    AC_SUBST(PYTHON_INCLUDES)
fi

dnl lzma support

AC_ARG_ENABLE([lzma],
             AS_HELP_STRING([--disable-lzma], [Don''t build bpak with lzma support]),
             [enable_lzma=$enableval],
             [enable_lzma="yes"])
AM_CONDITIONAL([BPAK_BUILD_LZMA], [test x$enable_lzma = xyes])

AC_MSG_CHECKING([Checking for lzma])
PKG_CHECK_MODULES(LIBLZMA, [liblzma >= 4.0.0], [have_lzma=true], [have_lzma=false])
AM_CONDITIONAL([HAVE_LIBLZMA], $have_lzma)

if test "x$enable_lzma" = "xyes"; then

    if $have_lzma; then
        AC_DEFINE([BPAK_BUILD_LZMA], [1], [Build with lzma support])
        CFLAGS="$CFLAGS $LIBLZMA_CFLAGS"
        LIBS="$LIBS $LIBLZMA_LIBS"
    fi
fi

dnl bpak tool options
AC_ARG_ENABLE([tool],
             AS_HELP_STRING([--disable-tool], [Don''t build bpak CLI]),
             [enable_tool=$enableval],
             [enable_tool="yes"])
AM_CONDITIONAL([BPAK_BUILD_TOOL], [test x$enable_tool = xyes])

AC_MSG_CHECKING([Checking for libuuid])
PKG_CHECK_MODULES(LIBUUID, [uuid >= 1.0.0], [have_uuid=true], [have_uuid=false])
AM_CONDITIONAL([HAVE_LIBUUID], $have_uuid)

if test "x$enable_tool" = "xyes"; then
    if $have_uuid; then
        AC_DEFINE([BPAK_BUILD_TOOL], [1], [Build tool])
        CFLAGS="$CFLAGS $LIBUUID_CFLAGS"
        LIBS="$LIBS $LIBUUID_LIBS"
    fi
fi

dnl Enable merkle encoder
AC_ARG_ENABLE([merkle],
             AS_HELP_STRING([--disable-merkle], [Don''t build the bpak merkle encoder]),
             [enable_merkle=$enableval],
             [enable_merkle="yes"])

AM_CONDITIONAL([BPAK_BUILD_MERKLE], [test x$enable_merkle = xyes])

if test "x$enable_merkle" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_MERKLE], [1], [Build with merkle encoder support])
fi

dnl Enable bsdiff
AC_ARG_ENABLE([bsdiff],
             AS_HELP_STRING([--disable-bsdiff], [Don''t build bpak bsdiff]),
             [enable_bsdiff=$enableval],
             [enable_bsdiff="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSDIFF], [test x$enable_bsdiff = xyes])

if test "x$enable_bsdiff" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSDIFF], [1], [Build with bsdiff support])
fi

dnl Enable bspatch
AC_ARG_ENABLE([bspatch],
             AS_HELP_STRING([--disable-bspatch], [Don''t build bpak bspatch]),
             [enable_bspatch=$enableval],
             [enable_bspatch="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSPATCH], [test x$enable_bspatch = xyes])

if test "x$enable_bspatch" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSPATCH], [1], [Build with bspatch support])
fi

dnl Enable pkg_create
AC_ARG_ENABLE([pkg-create],
             AS_HELP_STRING([--disable-pkg-create], [Don''t build pkg create]),
             [enable_pkg_create=$enableval],
             [enable_pkg_create="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_CREATE], [test x$enable_pkg_create = xyes])

if test "x$enable_pkg_create" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_CREATE], [1], [Build with support for creating packages])
fi

dnl Enable transport encode
AC_ARG_ENABLE([transport-encode],
             AS_HELP_STRING([--disable-transport-encode], [Don''t build transport encode]),
             [enable_transport_encode=$enableval],
             [enable_transport_encode="yes"])

AM_CONDITIONAL([BPAK_BUILD_TRANSPORT_ENCODE], [test x$enable_transport_encode = xyes])

if test "x$enable_transport_encode" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_TRANSPORT_ENCODE], [1], [Build with encoding packages for transport])
fi
dnl Enable pkg_sign
AC_ARG_ENABLE([pkg-sign],
             AS_HELP_STRING([--disable-pkg-sign], [Don''t build pkg sign]),
             [enable_pkg_sign=$enableval],
             [enable_pkg_sign="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_SIGN], [test x$enable_pkg_sign = xyes])

if test "x$enable_pkg_sign" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_SIGN], [1], [Build with support for signing packages])
fi

AC_CONFIG_FILES([Makefile
                src/Makefile
                lib/Makefile
                python/Makefile
                test/Makefile
                lib/bpak.pc])

AX_CODE_COVERAGE

dnl Dependencies build
dnl AC_CONFIG_SUBDIRS([deps/dep1])

AC_OUTPUT
dnl Bit Packer

AC_PREREQ(2.59)
AC_INIT([bpak], [0.6.0], [Jonas Blixt, <jonpe960@gmail.com>])

m4_pattern_forbid([^AX_(CHECK_ENABLE_DEBUG|CODE_COVERAGE|COMPILER_FLAGS|COMPILER_FLAGS_(CFLAGS|CXXFLAGS|LDFLAGS))\b],
  [Unexpanded AX_ macro found. Please install GNU autoconf-archive])

AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([foreign -Wall -Werror subdir-objects])
AM_PROG_AR
LT_INIT
AC_PROG_CC

dnl this allows us specify individual liking flags for each target
AM_PROG_CC_C_O

dnl Initialize Libtool

dnl Check if Libtool is present
dnl Libtool is used for building share libraries
AC_PROG_LIBTOOL

dnl Python stuff

AC_MSG_CHECKING( wheter to build the bpak python library)
AC_ARG_ENABLE([python-library],
             AS_HELP_STRING([--enable-python-library], [Build the bpak python libraryl]),
             [enable_python_library=$enableval],
             [enable_python_library="no"])

AC_MSG_RESULT($enable_python_library)
AM_CONDITIONAL([BUILD_BPAK_PYTHON_LIB], [test x$enable_python_library = xyes])

if test "x$enable_python_library" = "xyes"; then
    AM_PATH_PYTHON(,, [:])
    AC_ARG_VAR([PYTHON_CONFIG], [python-config program])
    AC_PATH_PROGS([PYTHON_CONFIG], [python$PYTHON_VERSION-config python-config],
                [unknown], [`dirname $PYTHON`:$PATH])
    AC_MSG_CHECKING([for Python include flags])
    if test "x$PYTHON_CONFIG" = "xunknown"; then
      pinc=-I`echo "import distutils.sysconfig; print (distutils.sysconfig.get_python_inc())" | $PYTHON - 2>/dev/null`
      test "x$pinc" = "x-I" && pinc=""
    else
      pinc=`$PYTHON_CONFIG --includes 2>/dev/null`
    fi
    AC_MSG_RESULT([${pinc:-unknown}])
    PYTHON_INCLUDES="$pinc"
    AC_SUBST(PYTHON_INCLUDES)
fi

dnl lzma support

AC_ARG_ENABLE([lzma],
             AS_HELP_STRING([--disable-lzma], [Don''t build bpak with lzma support]),
             [enable_lzma=$enableval],
             [enable_lzma="yes"])
AM_CONDITIONAL([BPAK_BUILD_LZMA], [test x$enable_lzma = xyes])

AC_MSG_CHECKING([Checking for lzma])
PKG_CHECK_MODULES(LIBLZMA, [liblzma >= 4.0.0], [have_lzma=true], [have_lzma=false])
AM_CONDITIONAL([HAVE_LIBLZMA], $have_lzma)

if test "x$enable_lzma" = "xyes"; then

    if $have_lzma; then
        AC_DEFINE([BPAK_BUILD_LZMA], [1], [Build with lzma support])
        CFLAGS="$CFLAGS $LIBLZMA_CFLAGS"
        LIBS="$LIBS $LIBLZMA_LIBS"
    fi
fi

dnl bpak tool options
AC_ARG_ENABLE([tool],
             AS_HELP_STRING([--disable-tool], [Don''t build bpak CLI]),
             [enable_tool=$enableval],
             [enable_tool="yes"])
AM_CONDITIONAL([BPAK_BUILD_TOOL], [test x$enable_tool = xyes])

AC_MSG_CHECKING([Checking for libuuid])
PKG_CHECK_MODULES(LIBUUID, [uuid >= 1.0.0], [have_uuid=true], [have_uuid=false])
AM_CONDITIONAL([HAVE_LIBUUID], $have_uuid)

if test "x$enable_tool" = "xyes"; then
    if $have_uuid; then
        AC_DEFINE([BPAK_BUILD_TOOL], [1], [Build tool])
        CFLAGS="$CFLAGS $LIBUUID_CFLAGS"
        LIBS="$LIBS $LIBUUID_LIBS"
    fi
fi

dnl Enable merkle encoder
AC_ARG_ENABLE([merkle],
             AS_HELP_STRING([--disable-merkle], [Don''t build the bpak merkle encoder]),
             [enable_merkle=$enableval],
             [enable_merkle="yes"])

AM_CONDITIONAL([BPAK_BUILD_MERKLE], [test x$enable_merkle = xyes])

if test "x$enable_merkle" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_MERKLE], [1], [Build with merkle encoder support])
fi

dnl Enable bsdiff
AC_ARG_ENABLE([bsdiff],
             AS_HELP_STRING([--disable-bsdiff], [Don''t build bpak bsdiff]),
             [enable_bsdiff=$enableval],
             [enable_bsdiff="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSDIFF], [test x$enable_bsdiff = xyes])

if test "x$enable_bsdiff" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSDIFF], [1], [Build with bsdiff support])
fi

dnl Enable bspatch
AC_ARG_ENABLE([bspatch],
             AS_HELP_STRING([--disable-bspatch], [Don''t build bpak bspatch]),
             [enable_bspatch=$enableval],
             [enable_bspatch="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSPATCH], [test x$enable_bspatch = xyes])

if test "x$enable_bspatch" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSPATCH], [1], [Build with bspatch support])
fi

dnl Enable pkg_create
AC_ARG_ENABLE([pkg-create],
             AS_HELP_STRING([--disable-pkg-create], [Don''t build pkg create]),
             [enable_pkg_create=$enableval],
             [enable_pkg_create="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_CREATE], [test x$enable_pkg_create = xyes])

if test "x$enable_pkg_create" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_CREATE], [1], [Build with support for creating packages])
fi

dnl Enable transport encode
AC_ARG_ENABLE([transport-encode],
             AS_HELP_STRING([--disable-transport-encode], [Don''t build transport encode]),
             [enable_transport_encode=$enableval],
             [enable_transport_encode="yes"])

AM_CONDITIONAL([BPAK_BUILD_TRANSPORT_ENCODE], [test x$enable_transport_encode = xyes])

if test "x$enable_transport_encode" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_TRANSPORT_ENCODE], [1], [Build with encoding packages for transport])
fi
dnl Enable pkg_sign
AC_ARG_ENABLE([pkg-sign],
             AS_HELP_STRING([--disable-pkg-sign], [Don''t build pkg sign]),
             [enable_pkg_sign=$enableval],
             [enable_pkg_sign="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_SIGN], [test x$enable_pkg_sign = xyes])

if test "x$enable_pkg_sign" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_SIGN], [1], [Build with support for signing packages])
fi

AC_CONFIG_FILES([Makefile
                src/Makefile
                lib/Makefile
                python/Makefile
                test/Makefile
                lib/bpak.pc])

AX_CODE_COVERAGE

dnl Dependencies build
dnl AC_CONFIG_SUBDIRS([deps/dep1])

AC_OUTPUT
dnl Bit Packer

AC_PREREQ(2.59)
AC_INIT([bpak], [0.6.0], [Jonas Blixt, <jonpe960@gmail.com>])

m4_pattern_forbid([^AX_(CHECK_ENABLE_DEBUG|CODE_COVERAGE|COMPILER_FLAGS|COMPILER_FLAGS_(CFLAGS|CXXFLAGS|LDFLAGS))\b],
  [Unexpanded AX_ macro found. Please install GNU autoconf-archive])

AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([foreign -Wall -Werror subdir-objects])
AM_PROG_AR
LT_INIT
AC_PROG_CC

dnl this allows us specify individual liking flags for each target
AM_PROG_CC_C_O

dnl Initialize Libtool

dnl Check if Libtool is present
dnl Libtool is used for building share libraries
AC_PROG_LIBTOOL

dnl Python stuff

AC_MSG_CHECKING( wheter to build the bpak python library)
AC_ARG_ENABLE([python-library],
             AS_HELP_STRING([--enable-python-library], [Build the bpak python libraryl]),
             [enable_python_library=$enableval],
             [enable_python_library="no"])

AC_MSG_RESULT($enable_python_library)
AM_CONDITIONAL([BUILD_BPAK_PYTHON_LIB], [test x$enable_python_library = xyes])

if test "x$enable_python_library" = "xyes"; then
    AM_PATH_PYTHON(,, [:])
    AC_ARG_VAR([PYTHON_CONFIG], [python-config program])
    AC_PATH_PROGS([PYTHON_CONFIG], [python$PYTHON_VERSION-config python-config],
                [unknown], [`dirname $PYTHON`:$PATH])
    AC_MSG_CHECKING([for Python include flags])
    if test "x$PYTHON_CONFIG" = "xunknown"; then
      pinc=-I`echo "import distutils.sysconfig; print (distutils.sysconfig.get_python_inc())" | $PYTHON - 2>/dev/null`
      test "x$pinc" = "x-I" && pinc=""
    else
      pinc=`$PYTHON_CONFIG --includes 2>/dev/null`
    fi
    AC_MSG_RESULT([${pinc:-unknown}])
    PYTHON_INCLUDES="$pinc"
    AC_SUBST(PYTHON_INCLUDES)
fi

dnl lzma support

AC_ARG_ENABLE([lzma],
             AS_HELP_STRING([--disable-lzma], [Don''t build bpak with lzma support]),
             [enable_lzma=$enableval],
             [enable_lzma="yes"])
AM_CONDITIONAL([BPAK_BUILD_LZMA], [test x$enable_lzma = xyes])

AC_MSG_CHECKING([Checking for lzma])
PKG_CHECK_MODULES(LIBLZMA, [liblzma >= 4.0.0], [have_lzma=true], [have_lzma=false])
AM_CONDITIONAL([HAVE_LIBLZMA], $have_lzma)

if test "x$enable_lzma" = "xyes"; then

    if $have_lzma; then
        AC_DEFINE([BPAK_BUILD_LZMA], [1], [Build with lzma support])
        CFLAGS="$CFLAGS $LIBLZMA_CFLAGS"
        LIBS="$LIBS $LIBLZMA_LIBS"
    fi
fi

dnl bpak tool options
AC_ARG_ENABLE([tool],
             AS_HELP_STRING([--disable-tool], [Don''t build bpak CLI]),
             [enable_tool=$enableval],
             [enable_tool="yes"])
AM_CONDITIONAL([BPAK_BUILD_TOOL], [test x$enable_tool = xyes])

AC_MSG_CHECKING([Checking for libuuid])
PKG_CHECK_MODULES(LIBUUID, [uuid >= 1.0.0], [have_uuid=true], [have_uuid=false])
AM_CONDITIONAL([HAVE_LIBUUID], $have_uuid)

if test "x$enable_tool" = "xyes"; then
    if $have_uuid; then
        AC_DEFINE([BPAK_BUILD_TOOL], [1], [Build tool])
        CFLAGS="$CFLAGS $LIBUUID_CFLAGS"
        LIBS="$LIBS $LIBUUID_LIBS"
    fi
fi

dnl Enable merkle encoder
AC_ARG_ENABLE([merkle],
             AS_HELP_STRING([--disable-merkle], [Don''t build the bpak merkle encoder]),
             [enable_merkle=$enableval],
             [enable_merkle="yes"])

AM_CONDITIONAL([BPAK_BUILD_MERKLE], [test x$enable_merkle = xyes])

if test "x$enable_merkle" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_MERKLE], [1], [Build with merkle encoder support])
fi

dnl Enable bsdiff
AC_ARG_ENABLE([bsdiff],
             AS_HELP_STRING([--disable-bsdiff], [Don''t build bpak bsdiff]),
             [enable_bsdiff=$enableval],
             [enable_bsdiff="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSDIFF], [test x$enable_bsdiff = xyes])

if test "x$enable_bsdiff" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSDIFF], [1], [Build with bsdiff support])
fi

dnl Enable bspatch
AC_ARG_ENABLE([bspatch],
             AS_HELP_STRING([--disable-bspatch], [Don''t build bpak bspatch]),
             [enable_bspatch=$enableval],
             [enable_bspatch="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSPATCH], [test x$enable_bspatch = xyes])

if test "x$enable_bspatch" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSPATCH], [1], [Build with bspatch support])
fi

dnl Enable pkg_create
AC_ARG_ENABLE([pkg-create],
             AS_HELP_STRING([--disable-pkg-create], [Don''t build pkg create]),
             [enable_pkg_create=$enableval],
             [enable_pkg_create="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_CREATE], [test x$enable_pkg_create = xyes])

if test "x$enable_pkg_create" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_CREATE], [1], [Build with support for creating packages])
fi

dnl Enable transport encode
AC_ARG_ENABLE([transport-encode],
             AS_HELP_STRING([--disable-transport-encode], [Don''t build transport encode]),
             [enable_transport_encode=$enableval],
             [enable_transport_encode="yes"])

AM_CONDITIONAL([BPAK_BUILD_TRANSPORT_ENCODE], [test x$enable_transport_encode = xyes])

if test "x$enable_transport_encode" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_TRANSPORT_ENCODE], [1], [Build with encoding packages for transport])
fi
dnl Enable pkg_sign
AC_ARG_ENABLE([pkg-sign],
             AS_HELP_STRING([--disable-pkg-sign], [Don''t build pkg sign]),
             [enable_pkg_sign=$enableval],
             [enable_pkg_sign="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_SIGN], [test x$enable_pkg_sign = xyes])

if test "x$enable_pkg_sign" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_SIGN], [1], [Build with support for signing packages])
fi

AC_CONFIG_FILES([Makefile
                src/Makefile
                lib/Makefile
                python/Makefile
                test/Makefile
                lib/bpak.pc])

AX_CODE_COVERAGE

dnl Dependencies build
dnl AC_CONFIG_SUBDIRS([deps/dep1])

AC_OUTPUT
dnl Bit Packer

AC_PREREQ(2.59)
AC_INIT([bpak], [0.6.0], [Jonas Blixt, <jonpe960@gmail.com>])

m4_pattern_forbid([^AX_(CHECK_ENABLE_DEBUG|CODE_COVERAGE|COMPILER_FLAGS|COMPILER_FLAGS_(CFLAGS|CXXFLAGS|LDFLAGS))\b],
  [Unexpanded AX_ macro found. Please install GNU autoconf-archive])

AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([foreign -Wall -Werror subdir-objects])
AM_PROG_AR
LT_INIT
AC_PROG_CC

dnl this allows us specify individual liking flags for each target
AM_PROG_CC_C_O

dnl Initialize Libtool

dnl Check if Libtool is present
dnl Libtool is used for building share libraries
AC_PROG_LIBTOOL

dnl Python stuff

AC_MSG_CHECKING( wheter to build the bpak python library)
AC_ARG_ENABLE([python-library],
             AS_HELP_STRING([--enable-python-library], [Build the bpak python libraryl]),
             [enable_python_library=$enableval],
             [enable_python_library="no"])

AC_MSG_RESULT($enable_python_library)
AM_CONDITIONAL([BUILD_BPAK_PYTHON_LIB], [test x$enable_python_library = xyes])

if test "x$enable_python_library" = "xyes"; then
    AM_PATH_PYTHON(,, [:])
    AC_ARG_VAR([PYTHON_CONFIG], [python-config program])
    AC_PATH_PROGS([PYTHON_CONFIG], [python$PYTHON_VERSION-config python-config],
                [unknown], [`dirname $PYTHON`:$PATH])
    AC_MSG_CHECKING([for Python include flags])
    if test "x$PYTHON_CONFIG" = "xunknown"; then
      pinc=-I`echo "import distutils.sysconfig; print (distutils.sysconfig.get_python_inc())" | $PYTHON - 2>/dev/null`
      test "x$pinc" = "x-I" && pinc=""
    else
      pinc=`$PYTHON_CONFIG --includes 2>/dev/null`
    fi
    AC_MSG_RESULT([${pinc:-unknown}])
    PYTHON_INCLUDES="$pinc"
    AC_SUBST(PYTHON_INCLUDES)
fi

dnl lzma support

AC_ARG_ENABLE([lzma],
             AS_HELP_STRING([--disable-lzma], [Don''t build bpak with lzma support]),
             [enable_lzma=$enableval],
             [enable_lzma="yes"])
AM_CONDITIONAL([BPAK_BUILD_LZMA], [test x$enable_lzma = xyes])

AC_MSG_CHECKING([Checking for lzma])
PKG_CHECK_MODULES(LIBLZMA, [liblzma >= 4.0.0], [have_lzma=true], [have_lzma=false])
AM_CONDITIONAL([HAVE_LIBLZMA], $have_lzma)

if test "x$enable_lzma" = "xyes"; then

    if $have_lzma; then
        AC_DEFINE([BPAK_BUILD_LZMA], [1], [Build with lzma support])
        CFLAGS="$CFLAGS $LIBLZMA_CFLAGS"
        LIBS="$LIBS $LIBLZMA_LIBS"
    fi
fi

dnl bpak tool options
AC_ARG_ENABLE([tool],
             AS_HELP_STRING([--disable-tool], [Don''t build bpak CLI]),
             [enable_tool=$enableval],
             [enable_tool="yes"])
AM_CONDITIONAL([BPAK_BUILD_TOOL], [test x$enable_tool = xyes])

AC_MSG_CHECKING([Checking for libuuid])
PKG_CHECK_MODULES(LIBUUID, [uuid >= 1.0.0], [have_uuid=true], [have_uuid=false])
AM_CONDITIONAL([HAVE_LIBUUID], $have_uuid)

if test "x$enable_tool" = "xyes"; then
    if $have_uuid; then
        AC_DEFINE([BPAK_BUILD_TOOL], [1], [Build tool])
        CFLAGS="$CFLAGS $LIBUUID_CFLAGS"
        LIBS="$LIBS $LIBUUID_LIBS"
    fi
fi

dnl Enable merkle encoder
AC_ARG_ENABLE([merkle],
             AS_HELP_STRING([--disable-merkle], [Don''t build the bpak merkle encoder]),
             [enable_merkle=$enableval],
             [enable_merkle="yes"])

AM_CONDITIONAL([BPAK_BUILD_MERKLE], [test x$enable_merkle = xyes])

if test "x$enable_merkle" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_MERKLE], [1], [Build with merkle encoder support])
fi

dnl Enable bsdiff
AC_ARG_ENABLE([bsdiff],
             AS_HELP_STRING([--disable-bsdiff], [Don''t build bpak bsdiff]),
             [enable_bsdiff=$enableval],
             [enable_bsdiff="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSDIFF], [test x$enable_bsdiff = xyes])

if test "x$enable_bsdiff" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSDIFF], [1], [Build with bsdiff support])
fi

dnl Enable bspatch
AC_ARG_ENABLE([bspatch],
             AS_HELP_STRING([--disable-bspatch], [Don''t build bpak bspatch]),
             [enable_bspatch=$enableval],
             [enable_bspatch="yes"])

AM_CONDITIONAL([BPAK_BUILD_BSPATCH], [test x$enable_bspatch = xyes])

if test "x$enable_bspatch" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_BSPATCH], [1], [Build with bspatch support])
fi

dnl Enable pkg_create
AC_ARG_ENABLE([pkg-create],
             AS_HELP_STRING([--disable-pkg-create], [Don''t build pkg create]),
             [enable_pkg_create=$enableval],
             [enable_pkg_create="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_CREATE], [test x$enable_pkg_create = xyes])

if test "x$enable_pkg_create" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_CREATE], [1], [Build with support for creating packages])
fi

dnl Enable transport encode
AC_ARG_ENABLE([transport-encode],
             AS_HELP_STRING([--disable-transport-encode], [Don''t build transport encode]),
             [enable_transport_encode=$enableval],
             [enable_transport_encode="yes"])

AM_CONDITIONAL([BPAK_BUILD_TRANSPORT_ENCODE], [test x$enable_transport_encode = xyes])

if test "x$enable_transport_encode" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_TRANSPORT_ENCODE], [1], [Build with encoding packages for transport])
fi
dnl Enable pkg_sign
AC_ARG_ENABLE([pkg-sign],
             AS_HELP_STRING([--disable-pkg-sign], [Don''t build pkg sign]),
             [enable_pkg_sign=$enableval],
             [enable_pkg_sign="yes"])

AM_CONDITIONAL([BPAK_BUILD_PKG_SIGN], [test x$enable_pkg_sign = xyes])

if test "x$enable_pkg_sign" = "xyes"; then
    AC_DEFINE([BPAK_BUILD_PKG_SIGN], [1], [Build with support for signing packages])
fi

AC_CONFIG_FILES([Makefile
                src/Makefile
                lib/Makefile
                python/Makefile
                test/Makefile
                lib/bpak.pc])

AX_CODE_COVERAGE

dnl Dependencies build
dnl AC_CONFIG_SUBDIRS([deps/dep1])

AC_OUTPUT
